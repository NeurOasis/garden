[
  {
    "id": "1",
    "title": "NeurOasis Organization Setup",
    "description": "GitHub Teams organization with Scott + Andrew, proper permissions, $16/month",
    "project": "core",
    "priority": "P0",
    "status": "done",
    "created": "2025-05-26T19:30:00.000Z"
  },
  {
    "id": "2",
    "title": "Repository Forking Strategy Proven",
    "description": "Template validated 100% across 5 different project types with surgical cleanup",
    "project": "deploy",
    "priority": "P0",
    "status": "done",
    "created": "2025-05-26T19:30:00.000Z"
  },
  {
    "id": "3",
    "title": "All 5 Project Forks Deployed",
    "description": "sailing-tools, coffee-recipes, family-tools, budget-nodepad, action-organizer all live",
    "project": "deploy",
    "priority": "P0",
    "status": "done",
    "created": "2025-05-26T19:30:00.000Z"
  },
  {
    "id": "4",
    "title": "Core Repository Cleanup",
    "description": "Achieved <30% project knowledge, removed all personal contexts staging",
    "project": "core",
    "priority": "P0",
    "status": "done",
    "created": "2025-05-26T19:30:00.000Z"
  },
  {
    "id": "5",
    "title": "Chat Archaeology Process",
    "description": "Systematic extraction of insights from conversation history",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-26T19:30:00.000Z"
  },
  {
    "id": "6",
    "title": "Automated Split Detection",
    "description": "Claude prompts for automatic repository management and split recommendations",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-26T19:30:00.000Z"
  },
  {
    "id": "7",
    "title": "CIT System Optimization",
    "description": "Simplified naming without dates, version tracking system",
    "project": "core",
    "priority": "P1",
    "status": "todo",
    "created": "2025-05-26T19:30:00.000Z"
  },
  {
    "id": "8",
    "title": "Business Strategy Framework",
    "description": "Corporate entity setup, service positioning, revenue model",
    "project": "core",
    "priority": "P2",
    "status": "backlog",
    "created": "2025-05-26T19:30:00.000Z"
  },
  {
    "id": "9",
    "title": "Documentation & Automation Framework",
    "description": "Automated split detection, business entity planning, collaboration workflows, service positioning",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-26T20:40:00.000Z"
  },
  {
    "id": "10",
    "title": "Production Deployment in Forked Repos",
    "description": "Build actual tools in focused repositories, test Andrew collaboration workflows",
    "project": "deploy",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-26T20:40:00.000Z"
  },
  {
    "id": "12",
    "title": "Chat Archaeology Methodology",
    "description": "Systematic conversation review process for extracting backlog items and strategic decisions",
    "project": "core",
    "priority": "P2",
    "status": "todo",
    "created": "2025-05-26T20:40:00.000Z"
  },
  {
    "id": "13",
    "title": "Core vs Fork Detection CIT",
    "description": "Create decision framework CIT for core developers to define what belongs in core vs requires fork creation",
    "project": "core",
    "priority": "P0",
    "status": "done",
    "created": "2025-05-26T20:50:00.000Z",
    "dependencies": [
      "Core developer consensus on boundaries"
    ],
    "implementation": "CIT_CoreVsFork_Detection_20250526.md with clear criteria and examples"
  },
  {
    "id": "14",
    "title": "Scott Personal CIT Rename",
    "description": "Rename CIT_Personal_20250525.md to CIT_Personal_Scott_20250525.md to allow Dan's context addition",
    "project": "core",
    "priority": "P0",
    "status": "done",
    "created": "2025-05-26T20:50:00.000Z",
    "dependencies": [],
    "implementation": "Simple file rename + update references"
  },
  {
    "id": "15",
    "title": "Dan Personal Context Onboarding",
    "description": "Email Dan to upload existing personal CIT as-is, Claude will enhance through conversations",
    "project": "core",
    "priority": "P0",
    "status": "todo",
    "created": "2025-05-26T20:50:00.000Z",
    "dependencies": [
      "Scott CIT rename completed"
    ],
    "implementation": "Simple email: upload existing CIT, no template copying required"
  },
  {
    "id": "16",
    "title": "User Identification System",
    "description": "Claude logic to recognize which user is interacting and load appropriate personal CIT automatically",
    "project": "core",
    "priority": "P1",
    "status": "todo",
    "created": "2025-05-26T20:50:00.000Z",
    "dependencies": [
      "Multiple personal CITs exist"
    ],
    "implementation": "CIT template for user recognition patterns and context loading"
  },
  {
    "id": "17",
    "title": "Missing Personal Context Handler",
    "description": "When no personal CIT exists for user, provide instructions before answering request",
    "project": "core",
    "priority": "P1",
    "status": "todo",
    "created": "2025-05-26T20:50:00.000Z",
    "dependencies": [
      "User identification system"
    ],
    "implementation": "Template instructions for personal CIT creation and GitHub upload"
  },
  {
    "id": "18",
    "title": "Iterative Context Enhancement",
    "description": "One-question-at-a-time personal CIT building through conversation, adapting to user communication style",
    "project": "core",
    "priority": "P2",
    "status": "backlog",
    "created": "2025-05-26T20:50:00.000Z",
    "dependencies": [
      "Personal CIT framework established"
    ],
    "implementation": "Progressive questioning system with conversation pattern learning"
  },
  {
    "id": "19",
    "title": "Documentation Workflow Implementation",
    "description": "Real-time documentation alongside development - README, CITs, version history updated with every change",
    "project": "core",
    "priority": "P0",
    "status": "done",
    "created": "2025-05-26T21:00:00.000Z",
    "dependencies": [],
    "implementation": "CIT_Documentation_Workflow_20250526.md with mandatory practices and Claude enforcement"
  },
  {
    "id": "20",
    "title": "Claude Working Feedback Enhancement",
    "description": "Clearer indicators when Claude is processing/working, especially for longer artifact generation",
    "project": "core",
    "priority": "P2",
    "status": "backlog",
    "created": "2025-05-26T21:05:00.000Z",
    "dependencies": [],
    "implementation": "Scott has insights into what would make Claude's working state clearer for users"
  },
  {
    "id": "1748437920643",
    "title": "Update Context Organization",
    "description": "Ask Claude for help - need to get the core CITs into the garden/contexts folder\n\nthen other CITs need to be nested somehow - is there a permission we can apply so that Claude can see all of them but dan can only see dan and Scott can only see Scott?  or password protection?",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-28T13:12:00.643Z"
  },
  {
    "id": "1748438076017",
    "title": "Pass New Architecture to Existing Documents",
    "description": "Can we automatically detect when an application (in core... maybe in the future in forks) is using an old architecture and alert dan & Scott to redevelop it? Would be cool to do this automatically, but maybe it's better, if we have a lean core, to have the human interaction.  that way we can also decide whether the updates should be standalone or go along with functionality... and whether the file is actually useful anymore!\n\nthis is critical for the backlog and the version history to match the new nodepad architecture, but we should break out the automation to be a medium priority item",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-28T13:14:36.017Z"
  },
  {
    "id": "1748438354415",
    "title": "Backlog Data Entry Enhancement",
    "description": "It's cool to enter the critical details in - but we might not know them.  also, it doesn't leverage the capabilities of nodepad.  backlog entry should be able to be accomplished two ways (so one click to add or update an item, and then maybe two tabs on the entry form - one for each workflow):\n\nworkflow a: give me the minimum necessary fields (I think we've got them already) to be able to connect these nodes to other nodes and understand how this relates to others\n\nworkflow b: free text entry - I just have an idea and I don't know where it goes.\n\nalso need to learn what the tabs at the top do (they look like sorting tabs, but I'm not sure - so better labeling).  and get the functionality for auto-organizing in here (especially if we are going to be putting these things in with free text).\n\nMaybe there is another way to \"add new entry\" too - at the top, just a free text field that user can write stuff.  Claude will SUGGEST projects, criticality, and priority... but clearly note these are suggestions, and allow the user to change them before saving!",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-28T13:19:14.415Z"
  },
  {
    "id": "1748438539456",
    "title": "!!!!! Edit Existing Doesn't Work",
    "description": "we should be able to edit existing - without losing backlog item history... that way if someone edits it and deletes a key detail, it can still be linked with other nodes (like if I deleted the title and the description... that backlog item still stays in the right spot even though It's got no content).\n\nwhile we're at it - some superuser privileges and guidelines - simple readme - to prevent mistakes",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-28T13:22:19.456Z"
  },
  {
    "id": "25",
    "title": "GARDEN Smart Uploader MVP COMPLETED",
    "description": "Zero-friction file upload system with GitHub OAuth integration. Deployed to production at https://garden-smart-uploader-7emsd86fb-scott-loebs-projects.vercel.app/toolshed/garden-uploader-mvp.html",
    "project": "core",
    "priority": "P0",
    "status": "done",
    "created": "2025-05-28T19:00:00.000Z",
    "implementation": "toolshed/garden-uploader-mvp.html + NeuroOasis GitHub App (Client ID: Iv23liR8xy1CGvWPkcVa)",
    "dependencies": [],
    "deliverables": [
      "Smart file analysis and placement",
      "GitHub OAuth integration",
      "Zero-configuration upload workflow",
      "Mobile file staging support",
      "Production Vercel deployment"
    ]
  },
  {
    "id": "26",
    "title": "Determine Uploader Placement Strategy",
    "description": "Decide if Smart Uploader should remain in core GARDEN or be moved to dedicated extension/service. Consider: cross-project utility, maintenance overhead, core philosophy alignment",
    "project": "core",
    "priority": "P2",
    "status": "backlog",
    "created": "2025-05-28T19:05:00.000Z",
    "dependencies": [
      "Uploader MVP completion"
    ],
    "implementation": "Strategic review: core vs fork routing, usage patterns analysis"
  },
  {
    "id": "27",
    "title": "OAuth Backend Security Implementation",
    "description": "Add secure OAuth backend endpoint to replace frontend client secret exposure. Implement proper token exchange with GitHub API for production security",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-28T19:05:00.000Z",
    "dependencies": [
      "Uploader MVP completion"
    ],
    "implementation": "/api/github/oauth endpoint with secure client secret handling"
  },
  {
    "id": "28",
    "title": "Uploader Testing & Validation",
    "description": "Comprehensive testing of Smart Uploader with real files: CITs, tools, documentation. Validate Dan file delivery workflow, new user onboarding, mid-conversation artifact rescue",
    "project": "core",
    "priority": "P0",
    "status": "done",
    "created": "2025-05-28T19:05:00.000Z",
    "dependencies": [
      "Uploader MVP completion"
    ],
    "implementation": "COMPLETED via mobile testing - validated iOS workflow, file staging, smart analysis, GitHub OAuth, backlog item detection needs",
    "notes": "Real-world mobile testing validated core workflow with areas for v5.1 enhancement identified"
  },
  {
    "id": "29",
    "title": "Multi-User Collaboration Testing",
    "description": "Test uploader workflow with different user contexts, permissions, and onboarding scenarios for external collaborators",
    "project": "core",
    "priority": "P2",
    "status": "backlog",
    "created": "2025-05-29T05:30:00.000Z",
    "dependencies": [
      "Uploader testing completion"
    ],
    "implementation": "External user simulation, new user onboarding flow, context creation workflow"
  },
  {
    "id": "30",
    "title": "Dynamic Core vs Fork Detection System",
    "description": "Replace hardcoded domain lists with dynamic analysis of what's actually in core. System should check current core contents and route based on actual framework components, not predefined categories.",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-29T16:30:00.000Z",
    "dependencies": [
      "Core vs Fork Detection CIT completion"
    ],
    "implementation": "Claude logic that analyzes current repository structure and makes routing decisions based on actual content patterns rather than static rules",
    "notes": "Instead of hardcoded rules, analyze what's actually in scottloeb/garden and make intelligent routing decisions"
  },
  {
    "id": "31",
    "title": "Interim Core Development Strategy for Dan",
    "description": "Create branching/forking strategy specifically for Dan's core development work. Full project knowledge should be 'just add the GitHub' without complex repository management.",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-29T16:30:00.000Z",
    "dependencies": [
      "Dan personal context onboarding"
    ],
    "implementation": "Simplified workflow: clone scottloeb/garden, feature branches, Scott handles merges",
    "notes": "Enable Dan core development without Git complexity - branch-based workflow with clear handoff process"
  },
  {
    "id": "32",
    "title": "Real-Time Collaborative Backlog Platform",
    "description": "Deploy backlog manager as shared platform where Scott and Dan can both access with real-time sync. Every UI change reflects for both users, backend updates propagate automatically.",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-29T16:30:00.000Z",
    "dependencies": [
      "Current backlog manager exists"
    ],
    "implementation": "Firebase + Vercel: Real-time database, deploy to backlog.neuroasis.space, GitHub OAuth, PWA features",
    "options": [
      "Firebase + Vercel (RECOMMENDED): Real-time sync, $0-25/month, medium complexity",
      "neuroasis.space + Database: Full control, $10-20/month, medium complexity", 
      "Native iOS App: Best experience, $99/year, high complexity"
    ],
    "notes": "Scott wants shared access where every drag & drop, addition & change reflects for both users instantly"
  },
  {
    "id": "33",
    "title": "Conversational Context-Sensitive Uploader",
    "description": "Enhance Smart Uploader with conversation context awareness. Every artifact Claude creates includes metadata about intended destination (user, repo, location) so uploader can automatically route without user input.",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-29T16:30:00.000Z",
    "dependencies": [
      "Smart Uploader MVP completion",
      "User identification system"
    ],
    "implementation": "Hidden metadata in artifacts: <!-- META: user=scott, repo=core, path=contexts/, type=CIT -->",
    "features": [
      "User recognition from communication patterns",
      "Repository routing based on content analysis", 
      "Path suggestions based on file type detection",
      "Conversation context linking to backlog items"
    ],
    "notes": "Scott wants artifacts to reference where they need to go so uploader can smartly identify user, repo, and location"
  },
  {
    "id": "34",
    "title": "GitHub Workflow Integration Links",
    "description": "When backlog items move to 'working' status, automatically generate 'Begin Work in GitHub' links that open the appropriate repository, create branch, or navigate to relevant files for development.",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-29T17:00:00.000Z",
    "dependencies": [
      "Real-time collaborative backlog platform"
    ],
    "implementation": "Dynamic link generation based on item metadata: core vs fork routing, automatic branch creation, file navigation shortcuts",
    "features": [
      "Smart repository detection (core vs fork)",
      "Automatic branch creation for new features",
      "Direct navigation to relevant files/directories",
      "Integration with GitHub CLI commands"
    ],
    "notes": "Scott wants seamless transition from planning to development - click 'working' → get direct GitHub links"
  },
  {
    "id": "35",
    "title": "Claude App Integration Links",
    "description": "Add 'Open in Claude' links throughout GARDEN tools that launch Claude desktop/mobile app with relevant context pre-loaded and project knowledge configured.",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-29T17:00:00.000Z",
    "dependencies": [
      "User identification system"
    ],
    "implementation": "Claude deep links: claude://chat/new?context=[encoded_context]&project=[project_id] with URL scheme registration",
    "features": [
      "Desktop app launching from web interfaces",
      "Mobile app launching with context",
      "Project knowledge pre-population",
      "Context pre-filling for specific tasks"
    ],
    "notes": "Scott wants 'Open in Claude' buttons throughout GARDEN tools for seamless development workflow"
  },
  {
    "id": "36",
    "title": "Claude Environment Auto-Instantiation",
    "description": "Explore deep linking to Claude that opens chat with context filled in and project knowledge pre-populated, OR single link that automatically sets up development environment based on GARDEN forking rules.",
    "project": "core",
    "priority": "P2",
    "status": "backlog",
    "created": "2025-05-29T17:00:00.000Z",
    "dependencies": [
      "Dynamic core vs fork detection",
      "Claude app integration links"
    ],
    "implementation": "Advanced deep linking: automatic environment detection, project knowledge loading, context initialization, forking rule application",
    "features": [
      "Automatic core vs fork environment detection",
      "Project knowledge auto-loading based on context",
      "Context pre-population with relevant CITs",
      "Development environment ready-to-go",
      "Integration with GitHub repository state"
    ],
    "notes": "Scott's vision: single link that creates perfect Claude environment for any GARDEN development task"
  },
  {
    "id": "37",
    "title": "Seth Godin: Hallucinations and Human Work Analysis",
    "description": "Blog post from Seth's Blog analyzing the relationship between AI hallucinations and human work. Relevant to GARDEN's AI-human collaboration philosophy and workflow design. URL: https://seths.blog/2025/05/hallucinations-and-human-work/",
    "project": "core",
    "priority": "P2",
    "status": "backlog",
    "created": "2025-05-30T16:30:00.000Z",
    "source": "mobile",
    "tags": ["AI-collaboration", "philosophy", "workflow-insights"],
    "url": "https://seths.blog/2025/05/hallucinations-and-human-work/",
    "implementation": "Review blog post for insights applicable to GARDEN AI-human collaboration patterns",
    "notes": "Added via mobile uploader test - Scott's birthday sprint mobile workflow validation"
  },
  {
    "id": "38",
    "title": "Mobile Uploader v5.1: Enhanced Backlog Detection",
    "description": "BREAKTHROUGH from mobile testing: Improve uploader intelligence for backlog items - detect JSON patterns, suggest merge actions, boost confidence for structured data from 60% to 95%",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-30T16:35:00.000Z",
    "dependencies": [
      "Mobile uploader testing completed"
    ],
    "implementation": "Pattern recognition for backlog JSON (id/title/status structure), smart merge suggestions with garden-backlog-current.json, mobile workflow optimization",
    "features": [
      "Backlog JSON pattern detection",
      "Merge vs create new file suggestions", 
      "95% confidence for structured backlog items",
      "Mobile staging workflow enhancement"
    ],
    "validation": "Real-world mobile test showed 60% confidence on backlog JSON - should be 95% with pattern recognition",
    "notes": "GOLDEN validation data from Scott's mobile test - uploader preserved JSON perfectly but missed backlog-specific routing"
  },
  {
    "id": "39",
    "title": "Lean Repo + Full Project Knowledge = Universal Upload Detection",
    "description": "REVOLUTIONARY INSIGHT: With lean core repo fully in project knowledge, mobile uploads auto-appear in Claude context on refresh. Enables automatic detection and processing of forgotten uploads from any user!",
    "project": "core",
    "priority": "P0",
    "status": "backlog", 
    "created": "2025-05-30T16:40:00.000Z",
    "dependencies": [
      "Lean core repository maintained",
      "Full project knowledge integration"
    ],
    "implementation": "Claude workflow: check for new files on project knowledge refresh, auto-detect upload types, suggest processing actions for mobile uploads, forgotten files, multi-user contributions",
    "features": [
      "Automatic new file detection on refresh",
      "Smart upload type recognition",
      "Processing suggestions for mobile files",
      "Multi-user upload handling"
    ],
    "breakthrough": "Scott's discovery: Hit refresh → mobile files instantly available → Claude can auto-process anything uploaded from anywhere!",
    "notes": "This eliminates mobile upload friction entirely - no manual processing needed, just refresh project knowledge!"
  },
  {
    "id": "40",
    "title": "Project Knowledge Attention Dilution Bug",
    "description": "CRITICAL BUG IDENTIFIED: Claude doesn't consistently follow CIT rules when project knowledge contains too much competing context. Even with CITs loaded, attention gets scattered instead of focused on guidelines.",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-30T17:00:00.000Z",
    "dependencies": [
      "Lean core repository strategy"
    ],
    "implementation": "Research optimal project knowledge size for CIT compliance, establish attention ratio guidelines, test CIT following performance vs repository size",
    "evidence": "Scott's Brandy Schedule chat - had CITs in project knowledge but Claude didn't follow rules properly due to context overload",
    "root_cause": "Too much information in project knowledge = attention gets scattered instead of focused on CITs and guidelines",
    "solution_path": "Clean, lean core repository + focused CIT hierarchy = better Claude CIT compliance",
    "urgency": "This explains why 'lean core' strategy is critical - not just for performance, but for Claude behavioral compliance!",
    "notes": "This bug validates our entire lean repository strategy - it's not just about efficiency, it's about Claude actually following the frameworks we've built!"
  },
  {
    "id": "41",
    "title": "GARDEN Efficiency Simulation Engine",
    "description": "STRATEGIC BREAKTHROUGH: Build AI system that simulates user interactions to generate quantified efficiency projections. Transform GARDEN from 'feels helpful' to 'proven 400% efficiency improvement' with concrete ROI data for enterprise sales.",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-30T18:00:00.000Z",
    "dependencies": [
      "Pet-care efficiency case study completion"
    ],
    "implementation": "Multi-phase simulation engine: conversation pattern mining → user behavior modeling → efficiency attribution → ROI calculator interface → competitive differentiation analytics",
    "business_value": [
      "Sales acceleration: 40% shorter cycles with concrete ROI data",
      "Premium pricing: 20% price premium justified by measured efficiency", 
      "Market differentiation: First quantified AI productivity measurement",
      "Enterprise access: Data-driven decision makers previously unreachable"
    ],
    "technical_scope": [
      "Phase 1: Foundation & data collection (conversation mining, user classification)",
      "Phase 2: Core simulation engine (communication flow simulator, attribution calculator)",
      "Phase 3: Business intelligence (ROI calculator, competitive analysis, success dashboard)"
    ],
    "success_metrics": [
      "Simulation accuracy within 20% of real outcomes",
      "ROI calculator used by 80% of qualified prospects", 
      "25% improvement in sales win rates with simulation data",
      "Product decisions driven by efficiency impact data"
    ],
    "validation_source": "Pet-care case study: 87.5% efficiency improvement (16→2 revisions) with component attribution",
    "competitive_advantage": "First AI productivity tool that can PROVE (not just claim) efficiency gains with systematic measurement",
    "notes": "This transforms GARDEN from productivity tool to efficiency measurement platform - creating systematic competitive moat through data"
  },
  {
    "id": "42",
    "title": "Conversation Handoff Automation",
    "description": "Auto-save artifacts and context when approaching chat limits, with seamless new-chat initialization to eliminate manual memory requirements",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-30T18:10:00.000Z",
    "dependencies": [
      "File system access configuration"
    ],
    "implementation": "Claude logic to detect approaching limits → auto-save critical artifacts → provide new-chat initialization prompt with file references",
    "user_workflow": "Hit limits → Claude auto-saves → Start new chat → Claude reads saved files → Continue seamlessly",
    "automation_triggers": [
      "Token usage approaching 80% of limit",
      "User manually requests conversation save",
      "Large artifact generation that might hit limits",
      "Critical context that needs preservation"
    ],
    "saved_content": [
      "Active artifacts and work-in-progress",
      "Conversation context and decisions made", 
      "File references and project state",
      "Next actions and continuation prompts"
    ],
    "user_benefit": "Never again manually remember to save conversation artifacts - fully automated workflow continuity",
    "notes": "Triggered by Scott's insight: 'Doing it manually ONCE = fine, remembering to do it EVERY TIME = human memory failure point'"
  },
  {
    "id": "43",
    "title": "Hidden Garden Tool Discovery Initiative",
    "description": "CRITICAL BLOCKER for MOCI 3.0/4.0: Unknown tools in explorer/, findings/, generated/, module-generators/, sunflower/, and toolshed/ subdirectories preventing efficient context management. Tools might be essential but unusable without understanding.",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-31T23:00:00.000Z",
    "dependencies": [
      "Access to garden repository directories"
    ],
    "problem_statement": "Multiple directories with unknown/undocumented tools that might be essential to GARDEN but are inaccessible due to lack of understanding. No Claude-readable instructions exist.",
    "affected_directories": [
      "explorer/ - Status unknown (should be in toolshed?)",
      "findings/ - Research artifacts?",
      "generated/ - Auto-generated content?",
      "module-generators/ - Tool creation tools?",
      "sunflower/ - Pattern detection system",
      "toolshed/ subdirectories - Mixed documented/undocumented"
    ],
    "goals": [
      "Complete audit of all undocumented tools",
      "Generate human-readable explanations",
      "Create Claude-usable CITs for each tool",
      "Identify compression opportunities in tool code",
      "Determine core vs. fork placement",
      "Enable efficient context mapping"
    ],
    "success_criteria": [
      "100% of tools have basic documentation",
      "Each tool has a MOCI-ready CIT",
      "Clear categorization (core/fork/deprecated)",
      "Tool compression strategy defined",
      "No more mystery directories"
    ],
    "blocks": [
      "MOCI 3.0/4.0 - Can't compress what we don't understand",
      "Efficient context mapping - Need to know what exists",
      "Fork strategy - Need clear tool categorization",
      "Bootstrap strategies - Require knowing tool purposes"
    ],
    "related_items": [
      "Auto-generated CITs for tools",
      "Toolshed inventory and standardization",
      "Module generator streamlining",
      "Sunflower exploration and documentation"
    ],
    "implementation": "Tool Audit Template → Systematic discovery → Human summaries → Claude CITs → Compression analysis → Core/fork decisions",
    "notes": "Scott's insight: 'we have potentially powerful tools that are inaccessible due to lack of understanding' - this foundational work makes everything else possible"
  },
  {
    "id": "44",
    "title": "GARDEN Core Philosophy Documentation",
    "description": "Document and preserve the core GARDEN philosophy: 'each tends the same garden yet sees a different world' - ensuring future development stays aligned with original vision of personal forks and diverse cognitive approaches.",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-31T23:30:00.000Z",
    "quote": "each tends the same garden yet sees a different world",
    "implementation": "Create philosophy.md or principles.md that captures the essence of GARDEN - same tools, different perspectives, personal adaptations",
    "purpose": "Tie back to original vision while supporting evolution",
    "notes": "This quote beautifully captures why we have personal forks - everyone uses the same tools but experiences them differently based on their cognitive style"
  },
  {
    "id": "45",
    "title": "Context Engineering Framework Integration",
    "description": "Integrate Dan's early context engineering frameworks (S.A.G.E., T.R.E.L.L.I.S., G.A.R.D.E.N.) into greenhouse core. These represent foundational cognitive partnership concepts that predated current implementation.",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-31T23:35:00.000Z",
    "artifacts": [
      "Cognitive Partnership Initialization Template (Knot-Enhanced)",
      "Context Initialization Hub",
      "Musical Context Template",
      "Prompt Engineering analysis",
      "Dan's manifesto/genifesto dialogue"
    ],
    "implementation": "Create contexts/foundational/ directory for these early frameworks, analyze for current relevance, extract reusable patterns",
    "significance": "These documents show the evolution from tool-based thinking to cognitive partnership model",
    "notes": "Dan's early work on S.A.G.E. (Systematic Adaptive Guidance Engine) within G.A.R.D.E.N. ecosystem predates and informs current MOCI work"
  },
  {
    "id": "46",
    "title": "Manifesto/Genifesto Documentation",
    "description": "Preserve Dan's human manifesto and S.A.G.E.'s AI 'genifesto' as foundational documents showing the bilateral nature of human-AI cognitive partnership.",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-31T23:40:00.000Z",
    "key_insights": [
      "AI as stabilizer not accelerator",
      "Interpolation over extrapolation",
      "Teaching over replacing",
      "Cognitive scaffolding concept"
    ],
    "dan_quote": "Let's use AI to nudge ourselves smoothly into the future, giving us the opportunity to stop and smell the roses.",
    "implementation": "Create manifestos/ directory with both documents, use as reference for all future AI integration decisions",
    "notes": "The manifesto/genifesto pair represents the first articulation of AI as cognitive partner rather than tool"
  },
  {
    "id": "47",
    "title": "Explorer Tool Investigation",
    "description": "Deep investigation of explorer/ directory - appears to be Python-based GARDEN visualization tool with v1 and v2. Could be critical missing piece for understanding GARDEN structure.",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-31T23:45:00.000Z",
    "discovery": {
      "location": "explorer/v2/",
      "files": ["garden_explorer.py", "helpers.py", "middleware_adapter.py", "templates/"],
      "type": "Python Flask application",
      "purpose": "Unknown - possibly GARDEN structure visualization"
    },
    "next_actions": [
      "Run garden_explorer.py and document functionality",
      "Check if this should be in toolshed",
      "Create CIT if valuable",
      "Determine core vs fork placement"
    ],
    "notes": "Python tools have been 'hidden' because they require different execution than HTML tools"
  },
  {
    "id": "48",
    "title": "Sunflower Pattern Detection Documentation",
    "description": "Document and activate sunflower/ directory - confirmed Flask application for pattern detection that aligns with Sunflower cognitive exploration pattern.",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-31T23:50:00.000Z",
    "discovery": {
      "location": "sunflower/",
      "files": ["app.py", "sunflower_connection_*.py", "templates/", "utils/"],
      "type": "Flask pattern detection system",
      "alignment": "Implements Sunflower cognitive pattern from G.A.R.D.E.N."
    },
    "implementation": "Test application, document pattern detection capabilities, create CIT, determine if core functionality",
    "notes": "This could be the missing implementation of Dan's Sunflower pattern recognition framework"
  },
  {
    "id": "49",
    "title": "Module Generators Investigation",
    "description": "Investigate module-generators/ directory containing Neo4j and PostgreSQL generators. These might be Dan's original Module Generator implementations.",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-31T23:55:00.000Z",
    "discovery": {
      "location": "module-generators/",
      "subdirs": ["neo4j/", "postgresql/"],
      "connection": "Likely related to Dan's original Module Generator work",
      "potential": "Database schema generation from patterns"
    },
    "implementation": "Audit both generators, understand META pattern implementation, create documentation",
    "notes": "These could be the database-specific implementations of the Module Generator pattern"
  },
  {
    "id": "50",
    "title": "Findings Directory Cleanup",
    "description": "Clean findings/ directory - move NINYE analysis to family-tools, preserve MOCI research and other legitimate findings.",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-06-01T00:00:00.000Z",
    "files_to_move": [
      "ninye-*.md files to family-tools",
      "Keep moci-*.md files",
      "Keep session summaries",
      "Archive old backlogs"
    ],
    "implementation": "Selective migration based on core vs personal project alignment",
    "notes": "Findings should only contain core GARDEN research, not personal project analysis"
  },
  {
    "id": "51",
    "title": "Cognitive Partnership Quotes Attribution",
    "description": "Research and properly attribute the quote 'each tends the same garden yet sees a different world' and integrate into GARDEN philosophy documentation.",
    "project": "core",
    "priority": "P2",
    "status": "backlog",
    "created": "2025-06-01T00:05:00.000Z",
    "implementation": "Research quote origin, add proper attribution, use as cornerstone of GARDEN philosophy",
    "significance": "This quote encapsulates why personal forks are essential - same tools, different experiences",
    "notes": "Understanding the source will help us better articulate GARDEN's philosophical foundations"
  },
  {
    "id": "52",
    "title": "Dan's Neurodivergent UI/UX Insights Integration",
    "description": "Integrate Dan's insights on UI design for neurodivergent users into core GARDEN design principles, particularly the 'subtract rather than add' principle.",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-06-01T00:10:00.000Z",
    "key_principles": [
      "Cognitive load reduction through subtraction",
      "Customizable density controls",
      "Avoiding sensory triggers",
      "Processing time options",
      "Borders only on selected items"
    ],
    "implementation": "Update core design standards CIT with neurodivergent accessibility guidelines",
    "notes": "These insights from Dan's experience should inform all GARDEN tool development"
  },
  {
    "id": "53",
    "title": "Python Tools Activation Strategy",
    "description": "Create strategy for making Python-based tools (Explorer, Sunflower, Module Generators) accessible and usable within GARDEN ecosystem.",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-06-01T00:15:00.000Z",
    "challenges": [
      "Different execution model than HTML tools",
      "Dependency management (Flask, etc.)",
      "Deployment complexity",
      "Integration with single-file philosophy"
    ],
    "potential_solutions": [
      "Containerization for easy deployment",
      "Web service deployment with HTML frontends",
      "Python-to-JavaScript transpilation",
      "Hybrid approach with API endpoints"
    ],
    "notes": "Python tools represent significant functionality that's currently inaccessible - need activation strategy"
  },
  {
    "id": "54",
    "title": "Fix GARDEN API CORS/Fetch Error (BUG-001)",
    "description": "Claude gets 'Failed to fetch' when calling GARDEN APIs directly. API calls are attempted but fail at the network level, causing fallback to web search.",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-06-01T00:20:00.000Z",
    "bug_id": "BUG-001",
    "type": "bug",
    "symptoms": [
      "Failed to fetch https://garden-tools-service.vercel.app/api/explorer",
      "Failed to fetch https://garden-tools-service.vercel.app/api/sunflower",
      "Claude correctly attempts API calls but network fails"
    ],
    "potential_causes": [
      "CORS headers not properly configured",
      "Claude environment may not support direct fetch",
      "API key authentication format issue",
      "Vercel function timeout or configuration"
    ],
    "validation": "API works via curl but not from Claude",
    "impact": "Forces Claude to use slower web search instead of instant API data",
    "next_actions": [
      "Test API with enhanced CORS headers",
      "Verify Vercel function configuration",
      "Consider proxy approach if Claude can't fetch directly",
      "Test with different authentication methods"
    ],
    "notes": "Good news: Claude IS trying to call APIs first (correct priority). Bad news: network layer failing."
  },
  {
    "id": "55",
    "title": "Validate GARDEN API Fix",
    "description": "Test whether the CORS/fetch fix for BUG-001 resolves Claude's ability to call GARDEN APIs directly. Run same test queries to verify successful API integration.",
    "project": "core",
    "priority": "P0",
    "status": "todo",
    "created": "2025-06-01T01:00:00.000Z",
    "dependencies": [
      "BUG-001 fix deployed"
    ],
    "test_queries": [
      "Tell me about NodePad",
      "What patterns exist in GARDEN?",
      "How do GARDEN tools connect?"
    ],
    "success_criteria": [
      "No 'Failed to fetch' errors",
      "API responses show in Claude's answer",
      "No fallback to web search for GARDEN terms",
      "Response time under 2 seconds"
    ],
    "validation_method": "Compare before/after responses for same queries",
    "notes": "Scott has short window - need quick validation that API integration is working"
  },
  {
    "id": "56",
    "title": "Fix BUG-001: GARDEN API CORS/Fetch Error",
    "description": "Resolve network layer issue preventing Claude from calling GARDEN APIs directly. APIs work via curl but fail from Claude environment.",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-06-01T14:00:00.000Z",
    "dependencies": [
      "CORS configuration update deployed",
      "Test environment ready"
    ],
    "implementation": "Update CORS headers in api/explorer.py and api/sunflower.py, test proxy approach if needed, validate with Claude integration tests",
    "starting_points": [
      "/garden-tools-service/api/explorer.py - Add CORS headers",
      "/garden-tools-service/api/sunflower.py - Add CORS headers",
      "/contexts/MANDATORY_GARDEN_API_CALLS.md - Integration logic",
      "Test queries documented in item #55"
    ],
    "notes": "APIs are correctly prioritized by Claude but network layer failing"
  },
  {
    "id": "57",
    "title": "MOCI 1.0 Full Development",
    "description": "Build complete MOCI encoder/decoder system achieving 80%+ compression while maintaining 100% information fidelity using binary/emoji/Esperanto/ASL encoding.",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-06-01T14:00:00.000Z",
    "dependencies": [
      "MOCI proof of concept validated (77% achieved)",
      "Sample CITs uploaded for testing"
    ],
    "implementation": "Build encoder/decoder functions, create pattern library, establish bidirectional translation, validate 80%+ compression across all CIT types",
    "starting_points": [
      "/contexts/moci/CIT_Claude_Tool_Integration.moci - Working example",
      "/findings/moci-discovery-20250531.md - Research notes",
      "5 sample CITs already uploaded for compression testing",
      "LCARS proof: 2,847 → 487 tokens (83% reduction)"
    ],
    "phases": [
      "Phase 1: Core encoder/decoder implementation",
      "Phase 2: Pattern library development",
      "Phase 3: Validation across all CIT types",
      "Phase 4: Integration with GARDEN core"
    ],
    "notes": "Foundation for revolutionary context management - enables unlimited tool growth"
  },
  {
    "id": "58",
    "title": "Microservice Pattern Application",
    "description": "Apply proven microservice extraction pattern to future heavy computational tools, establishing GARDEN as distributed tool ecosystem.",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-06-01T14:00:00.000Z",
    "dependencies": [
      "Microservice pattern documented",
      "Explorer/Sunflower APIs proven successful"
    ],
    "implementation": "Identify computational tools for extraction, create service templates, establish deployment pipeline, build tool marketplace concept",
    "starting_points": [
      "/patterns/microservice-extraction-pattern.md - Complete guide",
      "/garden-tools-service/ - Reference implementation",
      "Vercel deployment process documented",
      "API key authentication pattern established"
    ],
    "future_candidates": [
      "ML/AI analysis tools",
      "Data visualization generators",
      "External API wrappers",
      "File format processors",
      "Complex computational tools"
    ],
    "notes": "98% token reduction achieved with Explorer/Sunflower - pattern ready for scaling"
  },
  {
    "id": "59",
    "title": "Deep GARDEN Repository Cleanup",
    "description": "Complete reorganization of GARDEN repository structure including Python tool archival, directory consolidation, and clear navigation.",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-06-01T14:30:00.000Z",
    "scope": [
      "Archive all Python tools to archived-microservices/",
      "Move sunflower Python files but keep directory for future HTML tool",
      "Consolidate /generated/ and /module-generators/ purpose",
      "Clean up /gateway/ directory",
      "Remove old script files",
      "Create clear navigation structure"
    ],
    "implementation": "Systematic directory-by-directory cleanup preserving valuable documentation while removing redundant code",
    "goals": [
      "Single source of truth for each tool",
      "Clear separation of active vs archived",
      "Intuitive navigation for new users",
      "Reduced confusion about tool locations",
      "Preserved history in archive"
    ],
    "notes": "Quick 5-minute cleanup completed basic organization, this completes the deep restructure"
  },
  {
    "id": "60",
    "title": "Define CIT Scope Matrix: Users, Roles, and Arenas",
    "description": "Create matrix framework for defining scope across users (Scott, Dan, external), roles (developer, user, admin), and arenas (core, projects, tools, documentation). Enables MECE-compliant scope definitions in CIT headers.",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-06-15T20:00:00.000Z",
    "dependencies": [
      "CIT_VersionControl.md implementation"
    ],
    "implementation": "Research framework for scope boundaries, create matrix template, validate with existing CITs, integrate into version control standard",
    "purpose": "Enable precise scope definitions without dependencies between CITs",
    "notes": "Triggered by discussion of what 'Scope' means in CIT headers - need systematic framework for boundaries"
  },
  {
    "id": "61",
    "title": "GARDEN Tree Visualization - Living Website Front Page",
    "description": "Create NodePad-based tree visualization that connects GARDEN core to its branches (forks) and plots (projects). Visual front-page for website showing living ecosystem of tools and relationships.",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-06-15T21:30:00.000Z",
    "dependencies": [
      "NodePad framework stable",
      "Fork ecosystem established"
    ],
    "implementation": "Build interactive tree using NodePad 5.1.0+ with modular architecture. Root = GARDEN core, branches = user forks, leaves = specific projects/tools. Include hover details, navigation links.",
    "features": [
      "Interactive tree visualization",
      "Real-time updates as ecosystem grows",
      "Click-through navigation to forks/projects", 
      "Visual health indicators for active vs inactive",
      "Mobile-responsive design",
      "Single HTML file deployment"
    ],
    "user_value": "Immediately understand GARDEN ecosystem structure and find relevant projects",
    "notes": "Scott's vision: living visual front-page that grows with the GARDEN ecosystem, showing connections between core and all forks/projects"
  },
  {
    "id": "62",
    "title": "Corporate Front-End Visualization Dashboard",
    "description": "Single-page starting point linking corporate strategy, backlog items, active projects, and tools. Unified dashboard for business operations and strategic planning.",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-06-15T21:35:00.000Z",
    "dependencies": [
      "Corporate strategy CIT established",
      "Real-time backlog platform",
      "Project tracking system"
    ],
    "implementation": "Build comprehensive dashboard connecting strategy docs, backlog management, project status, and tool ecosystem. Easy navigation between planning and execution.",
    "features": [
      "Strategy-to-execution visualization",
      "Real-time backlog integration",
      "Active project status dashboard",
      "Tool ecosystem overview",
      "Quick navigation to work areas",
      "Progress tracking and metrics",
      "Role-based access (internal team focus)"
    ],
    "sections": [
      "Corporate Strategy Overview",
      "Active Backlog Items (by priority)",
      "Current Projects (with status)",
      "Tool Ecosystem Map",
      "Quick Actions (GitHub, Claude, Deploy)",
      "Success Metrics Dashboard"
    ],
    "user_value": "Single starting point for all business operations - strategy, planning, and execution in one view",
    "notes": "Scott's need: unified dashboard that connects high-level strategy with day-to-day execution, making it easy to work from planning to implementation"
  },
  {
    "id": "63",
    "title": "CIT_ToolStrategies.md Creation",
    "description": "Extracted tool-specific version strategies from complex version control CIT into focused document covering NodePad framework evolution, ModuleGenerator naming conventions, and tool-specific version management.",
    "project": "core",
    "priority": "P0",
    "status": "done",
    "created": "2025-06-15T22:00:00.000Z",
    "implementation": "Created contexts/CIT_ToolStrategies.md with NodePad living standard approach, ModuleGenerator generation-based naming (Gen1 vs V1/V2), and tool-specific archive processes",
    "scope": "Tool version strategies and evolution tracking for GARDEN toolshed components",
    "notes": "Successful extraction following MECE principle - tool strategies now have dedicated CIT separate from general version control methodology"
  },
  {
    "id": "64",
    "title": "Synchronize Archive Structure with Garden Structure Changes",
    "description": "Recursively update garden-archive repository structure to mirror any changes made to main garden repository structure. Maintain 1:1 directory mapping between garden and garden-archive for intuitive navigation.",
    "project": "core",
    "priority": "P2",
    "status": "backlog",
    "created": "2025-06-15T22:10:00.000Z",
    "dependencies": [
      "Deep GARDEN Repository Cleanup completion",
      "Garden structure simplification"
    ],
    "implementation": "Monitor garden structure changes, create corresponding directories in garden-archive, move archived content to new mirror locations, update archive documentation",
    "triggers": [
      "Garden directory structure changes",
      "Tool organization changes", 
      "Context organization updates",
      "Repository simplification efforts"
    ],
    "process": [
      "Detect garden structure changes",
      "Create corresponding archive directories",
      "Move existing archived content to new locations",
      "Update archive README and documentation",
      "Validate archive navigation remains intuitive"
    ],
    "goal": "Keep archive structure perfectly mirrored to main garden for intuitive historical content discovery",
    "notes": "Triggered by recognition that archive must stay synchronized as we simplify garden structure - recursive dependency that needs ongoing management"
  }
]