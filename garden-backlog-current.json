[
  {
    "id": "1",
    "title": "NeurOasis Organization Setup",
    "description": "GitHub Teams organization with Scott + Andrew, proper permissions, $16/month",
    "project": "core",
    "priority": "P0",
    "status": "done",
    "created": "2025-05-26T19:30:00.000Z"
  },
  {
    "id": "2",
    "title": "Repository Forking Strategy Proven",
    "description": "Template validated 100% across 5 different project types with surgical cleanup",
    "project": "deploy",
    "priority": "P0",
    "status": "done",
    "created": "2025-05-26T19:30:00.000Z"
  },
  {
    "id": "3",
    "title": "All 5 Project Forks Deployed",
    "description": "sailing-tools, coffee-recipes, family-tools, budget-nodepad, action-organizer all live",
    "project": "deploy",
    "priority": "P0",
    "status": "done",
    "created": "2025-05-26T19:30:00.000Z"
  },
  {
    "id": "4",
    "title": "Core Repository Cleanup",
    "description": "Achieved <30% project knowledge, removed all personal contexts staging",
    "project": "core",
    "priority": "P0",
    "status": "done",
    "created": "2025-05-26T19:30:00.000Z"
  },
  {
    "id": "5",
    "title": "Chat Archaeology Process",
    "description": "Systematic extraction of insights from conversation history",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-26T19:30:00.000Z"
  },
  {
    "id": "6",
    "title": "Automated Split Detection",
    "description": "Claude prompts for automatic repository management and split recommendations",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-26T19:30:00.000Z"
  },
  {
    "id": "7",
    "title": "CIT System Optimization",
    "description": "Simplified naming without dates, version tracking system",
    "project": "core",
    "priority": "P1",
    "status": "todo",
    "created": "2025-05-26T19:30:00.000Z"
  },
  {
    "id": "8",
    "title": "Business Strategy Framework",
    "description": "Corporate entity setup, service positioning, revenue model",
    "project": "core",
    "priority": "P2",
    "status": "backlog",
    "created": "2025-05-26T19:30:00.000Z"
  },
  {
    "id": "9",
    "title": "Documentation & Automation Framework",
    "description": "Automated split detection, business entity planning, collaboration workflows, service positioning",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-26T20:40:00.000Z"
  },
  {
    "id": "10",
    "title": "Production Deployment in Forked Repos",
    "description": "Build actual tools in focused repositories, test Andrew collaboration workflows",
    "project": "deploy",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-26T20:40:00.000Z"
  },
  {
    "id": "12",
    "title": "Chat Archaeology Methodology",
    "description": "Systematic conversation review process for extracting backlog items and strategic decisions",
    "project": "core",
    "priority": "P2",
    "status": "todo",
    "created": "2025-05-26T20:40:00.000Z"
  },
  {
    "id": "13",
    "title": "Core vs Fork Detection CIT",
    "description": "Create decision framework CIT for core developers to define what belongs in core vs requires fork creation",
    "project": "core",
    "priority": "P0",
    "status": "done",
    "created": "2025-05-26T20:50:00.000Z",
    "dependencies": [
      "Core developer consensus on boundaries"
    ],
    "implementation": "CIT_CoreVsFork_Detection_20250526.md with clear criteria and examples"
  },
  {
    "id": "14",
    "title": "Scott Personal CIT Rename",
    "description": "Rename CIT_Personal_20250525.md to CIT_Personal_Scott_20250525.md to allow Dan's context addition",
    "project": "core",
    "priority": "P0",
    "status": "done",
    "created": "2025-05-26T20:50:00.000Z",
    "dependencies": [],
    "implementation": "Simple file rename + update references"
  },
  {
    "id": "15",
    "title": "Dan Personal Context Onboarding",
    "description": "Email Dan to upload existing personal CIT as-is, Claude will enhance through conversations",
    "project": "core",
    "priority": "P0",
    "status": "todo",
    "created": "2025-05-26T20:50:00.000Z",
    "dependencies": [
      "Scott CIT rename completed"
    ],
    "implementation": "Simple email: upload existing CIT, no template copying required"
  },
  {
    "id": "16",
    "title": "User Identification System",
    "description": "Claude logic to recognize which user is interacting and load appropriate personal CIT automatically",
    "project": "core",
    "priority": "P1",
    "status": "todo",
    "created": "2025-05-26T20:50:00.000Z",
    "dependencies": [
      "Multiple personal CITs exist"
    ],
    "implementation": "CIT template for user recognition patterns and context loading"
  },
  {
    "id": "17",
    "title": "Missing Personal Context Handler",
    "description": "When no personal CIT exists for user, provide instructions before answering request",
    "project": "core",
    "priority": "P1",
    "status": "todo",
    "created": "2025-05-26T20:50:00.000Z",
    "dependencies": [
      "User identification system"
    ],
    "implementation": "Template instructions for personal CIT creation and GitHub upload"
  },
  {
    "id": "18",
    "title": "Iterative Context Enhancement",
    "description": "One-question-at-a-time personal CIT building through conversation, adapting to user communication style",
    "project": "core",
    "priority": "P2",
    "status": "backlog",
    "created": "2025-05-26T20:50:00.000Z",
    "dependencies": [
      "Personal CIT framework established"
    ],
    "implementation": "Progressive questioning system with conversation pattern learning"
  },
  {
    "id": "19",
    "title": "Documentation Workflow Implementation",
    "description": "Real-time documentation alongside development - README, CITs, version history updated with every change",
    "project": "core",
    "priority": "P0",
    "status": "done",
    "created": "2025-05-26T21:00:00.000Z",
    "dependencies": [],
    "implementation": "CIT_Documentation_Workflow_20250526.md with mandatory practices and Claude enforcement"
  },
  {
    "id": "20",
    "title": "Claude Working Feedback Enhancement",
    "description": "Clearer indicators when Claude is processing/working, especially for longer artifact generation",
    "project": "core",
    "priority": "P2",
    "status": "backlog",
    "created": "2025-05-26T21:05:00.000Z",
    "dependencies": [],
    "implementation": "Scott has insights into what would make Claude's working state clearer for users"
  },
  {
    "id": "1748437920643",
    "title": "Update Context Organization",
    "description": "Ask Claude for help - need to get the core CITs into the garden/contexts folder\n\nthen other CITs need to be nested somehow - is there a permission we can apply so that Claude can see all of them but dan can only see dan and Scott can only see Scott?  or password protection?",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-28T13:12:00.643Z"
  },
  {
    "id": "1748438076017",
    "title": "Pass New Architecture to Existing Documents",
    "description": "Can we automatically detect when an application (in core... maybe in the future in forks) is using an old architecture and alert dan & Scott to redevelop it? Would be cool to do this automatically, but maybe it's better, if we have a lean core, to have the human interaction.  that way we can also decide whether the updates should be standalone or go along with functionality... and whether the file is actually useful anymore!\n\nthis is critical for the backlog and the version history to match the new nodepad architecture, but we should break out the automation to be a medium priority item",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-28T13:14:36.017Z"
  },
  {
    "id": "1748438354415",
    "title": "Backlog Data Entry Enhancement",
    "description": "It's cool to enter the critical details in - but we might not know them.  also, it doesn't leverage the capabilities of nodepad.  backlog entry should be able to be accomplished two ways (so one click to add or update an item, and then maybe two tabs on the entry form - one for each workflow):\n\nworkflow a: give me the minimum necessary fields (I think we've got them already) to be able to connect these nodes to other nodes and understand how this relates to others\n\nworkflow b: free text entry - I just have an idea and I don't know where it goes.\n\nalso need to learn what the tabs at the top do (they look like sorting tabs, but I'm not sure - so better labeling).  and get the functionality for auto-organizing in here (especially if we are going to be putting these things in with free text).\n\nMaybe there is another way to \"add new entry\" too - at the top, just a free text field that user can write stuff.  Claude will SUGGEST projects, criticality, and priority... but clearly note these are suggestions, and allow the user to change them before saving!",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-28T13:19:14.415Z"
  },
  {
    "id": "1748438539456",
    "title": "!!!!! Edit Existing Doesn't Work",
    "description": "we should be able to edit existing - without losing backlog item history... that way if someone edits it and deletes a key detail, it can still be linked with other nodes (like if I deleted the title and the description... that backlog item still stays in the right spot even though It's got no content).\n\nwhile we're at it - some superuser privileges and guidelines - simple readme - to prevent mistakes",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-28T13:22:19.456Z"
  },
  {
    "id": "25",
    "title": "GARDEN Smart Uploader MVP COMPLETED",
    "description": "Zero-friction file upload system with GitHub OAuth integration. Deployed to production at https://garden-smart-uploader-7emsd86fb-scott-loebs-projects.vercel.app/toolshed/garden-uploader-mvp.html",
    "project": "core",
    "priority": "P0",
    "status": "done",
    "created": "2025-05-28T19:00:00.000Z",
    "implementation": "toolshed/garden-uploader-mvp.html + NeuroOasis GitHub App (Client ID: Iv23liR8xy1CGvWPkcVa)",
    "dependencies": [],
    "deliverables": [
      "Smart file analysis and placement",
      "GitHub OAuth integration",
      "Zero-configuration upload workflow",
      "Mobile file staging support",
      "Production Vercel deployment"
    ]
  },
  {
    "id": "26",
    "title": "Determine Uploader Placement Strategy",
    "description": "Decide if Smart Uploader should remain in core GARDEN or be moved to dedicated extension/service. Consider: cross-project utility, maintenance overhead, core philosophy alignment",
    "project": "core",
    "priority": "P2",
    "status": "backlog",
    "created": "2025-05-28T19:05:00.000Z",
    "dependencies": [
      "Uploader MVP completion"
    ],
    "implementation": "Strategic review: core vs fork routing, usage patterns analysis"
  },
  {
    "id": "27",
    "title": "OAuth Backend Security Implementation",
    "description": "Add secure OAuth backend endpoint to replace frontend client secret exposure. Implement proper token exchange with GitHub API for production security",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-28T19:05:00.000Z",
    "dependencies": [
      "Uploader MVP completion"
    ],
    "implementation": "/api/github/oauth endpoint with secure client secret handling"
  },
  {
    "id": "28",
    "title": "Uploader Testing & Validation",
    "description": "Comprehensive testing of Smart Uploader with real files: CITs, tools, documentation. Validate Dan file delivery workflow, new user onboarding, mid-conversation artifact rescue",
    "project": "core",
    "priority": "P0",
    "status": "done",
    "created": "2025-05-28T19:05:00.000Z",
    "dependencies": [
      "Uploader MVP completion"
    ],
    "implementation": "COMPLETED via mobile testing - validated iOS workflow, file staging, smart analysis, GitHub OAuth, backlog item detection needs",
    "notes": "Real-world mobile testing validated core workflow with areas for v5.1 enhancement identified"
  },
  {
    "id": "29",
    "title": "Multi-User Collaboration Testing",
    "description": "Test uploader workflow with different user contexts, permissions, and onboarding scenarios for external collaborators",
    "project": "core",
    "priority": "P2",
    "status": "backlog",
    "created": "2025-05-29T05:30:00.000Z",
    "dependencies": [
      "Uploader testing completion"
    ],
    "implementation": "External user simulation, new user onboarding flow, context creation workflow"
  },
  {
    "id": "30",
    "title": "Dynamic Core vs Fork Detection System",
    "description": "Replace hardcoded domain lists with dynamic analysis of what's actually in core. System should check current core contents and route based on actual framework components, not predefined categories.",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-29T16:30:00.000Z",
    "dependencies": [
      "Core vs Fork Detection CIT completion"
    ],
    "implementation": "Claude logic that analyzes current repository structure and makes routing decisions based on actual content patterns rather than static rules",
    "notes": "Instead of hardcoded rules, analyze what's actually in scottloeb/garden and make intelligent routing decisions"
  },
  {
    "id": "31",
    "title": "Interim Core Development Strategy for Dan",
    "description": "Create branching/forking strategy specifically for Dan's core development work. Full project knowledge should be 'just add the GitHub' without complex repository management.",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-29T16:30:00.000Z",
    "dependencies": [
      "Dan personal context onboarding"
    ],
    "implementation": "Simplified workflow: clone scottloeb/garden, feature branches, Scott handles merges",
    "notes": "Enable Dan core development without Git complexity - branch-based workflow with clear handoff process"
  },
  {
    "id": "32",
    "title": "Real-Time Collaborative Backlog Platform",
    "description": "Deploy backlog manager as shared platform where Scott and Dan can both access with real-time sync. Every UI change reflects for both users, backend updates propagate automatically.",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-29T16:30:00.000Z",
    "dependencies": [
      "Current backlog manager exists"
    ],
    "implementation": "Firebase + Vercel: Real-time database, deploy to backlog.neuroasis.space, GitHub OAuth, PWA features",
    "options": [
      "Firebase + Vercel (RECOMMENDED): Real-time sync, $0-25/month, medium complexity",
      "neuroasis.space + Database: Full control, $10-20/month, medium complexity", 
      "Native iOS App: Best experience, $99/year, high complexity"
    ],
    "notes": "Scott wants shared access where every drag & drop, addition & change reflects for both users instantly"
  },
  {
    "id": "33",
    "title": "Conversational Context-Sensitive Uploader",
    "description": "Enhance Smart Uploader with conversation context awareness. Every artifact Claude creates includes metadata about intended destination (user, repo, location) so uploader can automatically route without user input.",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-29T16:30:00.000Z",
    "dependencies": [
      "Smart Uploader MVP completion",
      "User identification system"
    ],
    "implementation": "Hidden metadata in artifacts: <!-- META: user=scott, repo=core, path=contexts/, type=CIT -->",
    "features": [
      "User recognition from communication patterns",
      "Repository routing based on content analysis", 
      "Path suggestions based on file type detection",
      "Conversation context linking to backlog items"
    ],
    "notes": "Scott wants artifacts to reference where they need to go so uploader can smartly identify user, repo, and location"
  },
  {
    "id": "34",
    "title": "GitHub Workflow Integration Links",
    "description": "When backlog items move to 'working' status, automatically generate 'Begin Work in GitHub' links that open the appropriate repository, create branch, or navigate to relevant files for development.",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-29T17:00:00.000Z",
    "dependencies": [
      "Real-time collaborative backlog platform"
    ],
    "implementation": "Dynamic link generation based on item metadata: core vs fork routing, automatic branch creation, file navigation shortcuts",
    "features": [
      "Smart repository detection (core vs fork)",
      "Automatic branch creation for new features",
      "Direct navigation to relevant files/directories",
      "Integration with GitHub CLI commands"
    ],
    "notes": "Scott wants seamless transition from planning to development - click 'working' → get direct GitHub links"
  },
  {
    "id": "35",
    "title": "Claude App Integration Links",
    "description": "Add 'Open in Claude' links throughout GARDEN tools that launch Claude desktop/mobile app with relevant context pre-loaded and project knowledge configured.",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-29T17:00:00.000Z",
    "dependencies": [
      "User identification system"
    ],
    "implementation": "Claude deep links: claude://chat/new?context=[encoded_context]&project=[project_id] with URL scheme registration",
    "features": [
      "Desktop app launching from web interfaces",
      "Mobile app launching with context",
      "Project knowledge pre-population",
      "Context pre-filling for specific tasks"
    ],
    "notes": "Scott wants 'Open in Claude' buttons throughout GARDEN tools for seamless development workflow"
  },
  {
    "id": "36",
    "title": "Claude Environment Auto-Instantiation",
    "description": "Explore deep linking to Claude that opens chat with context filled in and project knowledge pre-populated, OR single link that automatically sets up development environment based on GARDEN forking rules.",
    "project": "core",
    "priority": "P2",
    "status": "backlog",
    "created": "2025-05-29T17:00:00.000Z",
    "dependencies": [
      "Dynamic core vs fork detection",
      "Claude app integration links"
    ],
    "implementation": "Advanced deep linking: automatic environment detection, project knowledge loading, context initialization, forking rule application",
    "features": [
      "Automatic core vs fork environment detection",
      "Project knowledge auto-loading based on context",
      "Context pre-population with relevant CITs",
      "Development environment ready-to-go",
      "Integration with GitHub repository state"
    ],
    "notes": "Scott's vision: single link that creates perfect Claude environment for any GARDEN development task"
  },
  {
    "id": "37",
    "title": "Seth Godin: Hallucinations and Human Work Analysis",
    "description": "Blog post from Seth's Blog analyzing the relationship between AI hallucinations and human work. Relevant to GARDEN's AI-human collaboration philosophy and workflow design. URL: https://seths.blog/2025/05/hallucinations-and-human-work/",
    "project": "core",
    "priority": "P2",
    "status": "backlog",
    "created": "2025-05-30T16:30:00.000Z",
    "source": "mobile",
    "tags": ["AI-collaboration", "philosophy", "workflow-insights"],
    "url": "https://seths.blog/2025/05/hallucinations-and-human-work/",
    "implementation": "Review blog post for insights applicable to GARDEN AI-human collaboration patterns",
    "notes": "Added via mobile uploader test - Scott's birthday sprint mobile workflow validation"
  },
  {
    "id": "38",
    "title": "Mobile Uploader v5.1: Enhanced Backlog Detection",
    "description": "BREAKTHROUGH from mobile testing: Improve uploader intelligence for backlog items - detect JSON patterns, suggest merge actions, boost confidence for structured data from 60% to 95%",
    "project": "core",
    "priority": "P1",
    "status": "backlog",
    "created": "2025-05-30T16:35:00.000Z",
    "dependencies": [
      "Mobile uploader testing completed"
    ],
    "implementation": "Pattern recognition for backlog JSON (id/title/status structure), smart merge suggestions with garden-backlog-current.json, mobile workflow optimization",
    "features": [
      "Backlog JSON pattern detection",
      "Merge vs create new file suggestions", 
      "95% confidence for structured backlog items",
      "Mobile staging workflow enhancement"
    ],
    "validation": "Real-world mobile test showed 60% confidence on backlog JSON - should be 95% with pattern recognition",
    "notes": "GOLDEN validation data from Scott's mobile test - uploader preserved JSON perfectly but missed backlog-specific routing"
  },
  {
    "id": "39",
    "title": "Lean Repo + Full Project Knowledge = Universal Upload Detection",
    "description": "REVOLUTIONARY INSIGHT: With lean core repo fully in project knowledge, mobile uploads auto-appear in Claude context on refresh. Enables automatic detection and processing of forgotten uploads from any user!",
    "project": "core",
    "priority": "P0",
    "status": "backlog", 
    "created": "2025-05-30T16:40:00.000Z",
    "dependencies": [
      "Lean core repository maintained",
      "Full project knowledge integration"
    ],
    "implementation": "Claude workflow: check for new files on project knowledge refresh, auto-detect upload types, suggest processing actions for mobile uploads, forgotten files, multi-user contributions",
    "features": [
      "Automatic new file detection on refresh",
      "Smart upload type recognition",
      "Processing suggestions for mobile files",
      "Multi-user upload handling"
    ],
    "breakthrough": "Scott's discovery: Hit refresh → mobile files instantly available → Claude can auto-process anything uploaded from anywhere!",
    "notes": "This eliminates mobile upload friction entirely - no manual processing needed, just refresh project knowledge!"
  },
  {
    "id": "40",
    "title": "Project Knowledge Attention Dilution Bug",
    "description": "CRITICAL BUG IDENTIFIED: Claude doesn't consistently follow CIT rules when project knowledge contains too much competing context. Even with CITs loaded, attention gets scattered instead of focused on guidelines.",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-30T17:00:00.000Z",
    "dependencies": [
      "Lean core repository strategy"
    ],
    "implementation": "Research optimal project knowledge size for CIT compliance, establish attention ratio guidelines, test CIT following performance vs repository size",
    "evidence": "Scott's Brandy Schedule chat - had CITs in project knowledge but Claude didn't follow rules properly due to context overload",
    "root_cause": "Too much information in project knowledge = attention gets scattered instead of focused on CITs and guidelines",
    "solution_path": "Clean, lean core repository + focused CIT hierarchy = better Claude CIT compliance",
    "urgency": "This explains why 'lean core' strategy is critical - not just for performance, but for Claude behavioral compliance!",
    "notes": "This bug validates our entire lean repository strategy - it's not just about efficiency, it's about Claude actually following the frameworks we've built!"
  },
  {
    "id": "41",
    "title": "GARDEN Efficiency Simulation Engine",
    "description": "STRATEGIC BREAKTHROUGH: Build AI system that simulates user interactions to generate quantified efficiency projections. Transform GARDEN from 'feels helpful' to 'proven 400% efficiency improvement' with concrete ROI data for enterprise sales.",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-30T18:00:00.000Z",
    "dependencies": [
      "Pet-care efficiency case study completion"
    ],
    "implementation": "Multi-phase simulation engine: conversation pattern mining → user behavior modeling → efficiency attribution → ROI calculator interface → competitive differentiation analytics",
    "business_value": [
      "Sales acceleration: 40% shorter cycles with concrete ROI data",
      "Premium pricing: 20% price premium justified by measured efficiency", 
      "Market differentiation: First quantified AI productivity measurement",
      "Enterprise access: Data-driven decision makers previously unreachable"
    ],
    "technical_scope": [
      "Phase 1: Foundation & data collection (conversation mining, user classification)",
      "Phase 2: Core simulation engine (communication flow simulator, attribution calculator)",
      "Phase 3: Business intelligence (ROI calculator, competitive analysis, success dashboard)"
    ],
    "success_metrics": [
      "Simulation accuracy within 20% of real outcomes",
      "ROI calculator used by 80% of qualified prospects", 
      "25% improvement in sales win rates with simulation data",
      "Product decisions driven by efficiency impact data"
    ],
    "validation_source": "Pet-care case study: 87.5% efficiency improvement (16→2 revisions) with component attribution",
    "competitive_advantage": "First AI productivity tool that can PROVE (not just claim) efficiency gains with systematic measurement",
    "notes": "This transforms GARDEN from productivity tool to efficiency measurement platform - creating systematic competitive moat through data"
  },
  {
    "id": "42",
    "title": "Conversation Handoff Automation",
    "description": "Auto-save artifacts and context when approaching chat limits, with seamless new-chat initialization to eliminate manual memory requirements",
    "project": "core",
    "priority": "P0",
    "status": "backlog",
    "created": "2025-05-30T18:10:00.000Z",
    "dependencies": [
      "File system access configuration"
    ],
    "implementation": "Claude logic to detect approaching limits → auto-save critical artifacts → provide new-chat initialization prompt with file references",
    "user_workflow": "Hit limits → Claude auto-saves → Start new chat → Claude reads saved files → Continue seamlessly",
    "automation_triggers": [
      "Token usage approaching 80% of limit",
      "User manually requests conversation save",
      "Large artifact generation that might hit limits",
      "Critical context that needs preservation"
    ],
    "saved_content": [
      "Active artifacts and work-in-progress",
      "Conversation context and decisions made", 
      "File references and project state",
      "Next actions and continuation prompts"
    ],
    "user_benefit": "Never again manually remember to save conversation artifacts - fully automated workflow continuity",
    "notes": "Triggered by Scott's insight: 'Doing it manually ONCE = fine, remembering to do it EVERY TIME = human memory failure point'"
  }
]